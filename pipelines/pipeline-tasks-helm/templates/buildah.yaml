apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: buildah
  namespace: {{.Release.Namespace}}
spec:
  params:
    - name: IMAGE
      description: Reference of the image buildah will produce.
      type: string
    - name: IMAGE_TAG
      description: Reference of the target image tag.
      default: latest
      type: string
    - name: BUILDAH_IMAGE
      description: Reference the image version of buildah.
      type: string
    - name: STORAGE_DRIVER
      description: Set buildah storage driver
      default: overlay
      type: string
    - name: DOCKERFILE
      description: Path to the Dockerfile to build.
      default: ./Dockerfile
      type: string
    - name: CONTEXT
      description: Path to the Dockerfile to build.
      default: .
      type: string
    - name: IMAGE_REGISTRY
      description: The Root url of the image registry.
      default: docker.io
      type: string
    - name: IMAGE_REGISTRY_USER
      description: The secret name of the secret holding the username.
      default: image-registry-username
      type: string
    - name: IMAGE_REGISTRY_PASS
      description: The secret name of the secret holding the password.
      default: image-registry-password
      type: string
  workspaces:
    - name: source
  volumes:
    - name: varlibcontainers
      emptyDir: {}
  steps:
    - name: build
      image: $(params.BUILDAH_IMAGE)
      script: |
        #!/usr/bin/env bash
        set -x
        buildah login -u $IMAGE_REGISTRY_USER -p $IMAGE_REGISTRY_PASS $(params.IMAGE_REGISTRY) 
        buildah --storage-driver=$(params.STORAGE_DRIVER) bud \
          --no-cache -f $(params.CONTEXT)/Dockerfile -t $(params.IMAGE_REGISTRY)/$(params.IMAGE):latest --isolation chroot $(params.CONTEXT) 
        buildah --storage-driver=$(params.STORAGE_DRIVER) push $(params.IMAGE_REGISTRY)/$(params.IMAGE):latest 
        
      workingDir: $(workspaces.source.path)
      securityContext:
        capabilities:
          add: [SETFCAP]
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
      env:
        - name: IMAGE_REGISTRY_USER
          valueFrom:
            secretKeyRef:
              name: $(params.IMAGE_REGISTRY_USER)
              key: $(params.IMAGE_REGISTRY_USER)
        - name: IMAGE_REGISTRY_PASS
          valueFrom:
            secretKeyRef:
              name: $(params.IMAGE_REGISTRY_PASS)
              key: $(params.IMAGE_REGISTRY_PASS)
    - name: trivy-scan
      image: docker.io/aquasec/trivy
      script: |
        trivy image $(params.IMAGE_REGISTRY)/$(params.IMAGE):latest
      workingDir: $(workspaces.source.path)
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
      env:
        - name: TRIVY_USERNAME
          valueFrom:
            secretKeyRef:
              name: $(params.IMAGE_REGISTRY_USER)
              key: $(params.IMAGE_REGISTRY_USER)
        - name: TRIVY_PASSWORD
          valueFrom:
            secretKeyRef:
              name: $(params.IMAGE_REGISTRY_PASS)
              key: $(params.IMAGE_REGISTRY_PASS)
    - name: push
      image: $(params.BUILDAH_IMAGE)
      script: |
        #!/usr/bin/env bash
        set -x
        buildah login \
          -u $IMAGE_REGISTRY_USER \
          -p $IMAGE_REGISTRY_PASS $(params.IMAGE_REGISTRY) > /dev/null
        buildah --storage-driver=$(params.STORAGE_DRIVER) push $(params.IMAGE_REGISTRY)/$(params.IMAGE):latest 
        
      workingDir: $(workspaces.source.path)
      securityContext:
        capabilities:
          add: [SETFCAP]
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
      env:
        - name: IMAGE_REGISTRY_USER
          valueFrom:
            secretKeyRef:
              name: $(params.IMAGE_REGISTRY_USER)
              key: $(params.IMAGE_REGISTRY_USER)
        - name: IMAGE_REGISTRY_PASS
          valueFrom:
            secretKeyRef:
              name: $(params.IMAGE_REGISTRY_PASS)
              key: $(params.IMAGE_REGISTRY_PASS)
